stages:
  - check
  - test
  - build
  - doc
  - deploy
  - release

variables:
  FLATPAK_MODULE: "fractal"
  RUNTIME_REPO: "https://nightly.gnome.org/gnome-nightly.flatpakrepo"
  CI_IMAGE: "quay.io/gnome_infrastructure/gnome-runtime-images:gnome-master"

.hack:
  variables:
    MANIFEST_PATH: "build-aux/org.gnome.Fractal.Hack.json"
    APP_ID: "org.gnome.Fractal.Hack"

.devel:
  variables:
    MANIFEST_PATH: "build-aux/org.gnome.Fractal.Devel.json"
    APP_ID: "org.gnome.Fractal.Devel"  

.build_template:
  image: '${CI_IMAGE}'
  script:
    - >
      xvfb-run -a -s "-screen 0 1024x768x24"
      flatpak-builder --keep-build-dirs --user --disable-rofiles-fuse flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}
    - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
    - mkdir logs
    - mv .flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/meson-log.txt logs/
    - mv .flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/testlog.txt logs/
    - tar cf repo.tar repo/
  artifacts:
    name: 'Flatpak artifacts'
    expose_as: 'Get Flatpak bundle here'
    when: 'always'
    paths:
      - "${BUNDLE}"
      - 'repo.tar'
      - 'logs'
    expire_in: 14 days

.build_x86_64:
  extends: .build_template
  tags:
    - flatpak

.build_aarch64:
  extends: .build_template
  tags:
    - flatpak-aarch64

.publish_nightly_template:
  image: 'quay.io/gnome_infrastructure/gnome-runtime-images:flat-manager-client'
  stage: 'deploy'
  timeout: '100m'
  script:
    - tar xf repo.tar
    - flatpak build-update-repo --generate-static-deltas repo/
    - BUILD_ID=$(flat-manager-client create ${FLAT_MANAGER_URL} ${FLATPAK_REPO})
    - flat-manager-client push --commit --publish --wait ${BUILD_ID} repo/ || result=$?
    - flat-manager-client purge ${BUILD_ID}
    - exit $result
  variables:
    FLAT_MANAGER_URL: https://flat-manager.gnome.org/
    FLATPAK_REPO: nightly
  only:
    refs:
      - main
    variables:
      - $REPO_TOKEN

# Configure and run code checks
# Exits and fails if an error is encountered
checks:
  image: "rustlang/rust:nightly-slim"
  stage: check
  script:
    - scripts/checks.sh --verbose --force-install

# Lint the code
cargo-clippy:
  extends: .hack
  image: '${CI_IMAGE}'
  stage: check
  tags:
    - flatpak
  script:
    - flatpak-builder --keep-build-dirs --user --disable-rofiles-fuse --stop-at=${FLATPAK_MODULE} flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}
    - echo "cargo clippy -- -D warnings" | flatpak-builder --disable-rofiles-fuse --build-shell=${FLATPAK_MODULE} flatpak_app ${MANIFEST_PATH}

# Build a debug version of the flatpak
# Except on main
flatpak:
  extends:
    - .hack
    - .build_x86_64
  stage: test
  variables:
    BUNDLE: "fractal-hack.flatpak"
  except:
    - main

# Build the nightly version of the flatpak
# Only on main
build-x86_64:
  extends:
    - .devel
    - .build_x86_64
  stage: build
  variables:
    MANIFEST_PATH: "build-aux/org.gnome.Fractal.Devel.json"
    APP_ID: "org.gnome.Fractal.Devel"
    BUNDLE: "fractal-devel-x86_64.flatpak"
  only:
    - main
build-aarch64:
  extends:
    - .devel
    - .build_aarch64
  stage: build
  variables:
    MANIFEST_PATH: "build-aux/org.gnome.Fractal.Devel.json"
    APP_ID: "org.gnome.Fractal.Devel"
    BUNDLE: "fractal-devel-aarch64.flatpak"
  only:
    - main

# Build the docs
# Only on main
pages:
  extends: .devel
  image: '${CI_IMAGE}'
  stage: doc
  tags:
    - flatpak
  script:
    - flatpak install --user --noninteractive org.freedesktop.Sdk.Extension.rust-nightly//22.08
    - sed -i 's|rust-stable|rust-nightly|g' ${MANIFEST_PATH}
    - flatpak-builder --keep-build-dirs --user --disable-rofiles-fuse --stop-at=${FLATPAK_MODULE} flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}
    - echo "ninja src/doc" | flatpak-builder --disable-rofiles-fuse --build-shell=${FLATPAK_MODULE} flatpak_app ${MANIFEST_PATH}
    - mv .flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/src/doc public
    - chmod -R a=rwx public
  artifacts:
    paths:
      - 'public'
  only:
    refs:
      - main

# Publish the nightly version
# Only on main
publish_nightly-x86_64:
  extends: .publish_nightly_template
  dependencies: ['build-x86_64']
  needs: ['build-x86_64']
publish_nightly-aarch64:
  extends: .publish_nightly_template
  dependencies: ['build-aarch64']
  needs: ['build-aarch64']

.vars_release:
  variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/release-tarballs/${CI_COMMIT_TAG}"
    RELEASE_TARBALL: "fractal-${CI_COMMIT_TAG}.tar.xz"
    RELEASE_TARBALL_SHA: "fractal-${CI_COMMIT_TAG}.tar.xz.sha256sum"
    FLATPAK_MODULE: "fractal"
    MANIFEST_PATH: "build-aux/org.gnome.Fractal.json"
    APP_ID: "org.gnome.Fractal"
    CONFIG_OPTS: "-Dprofile=default"

release-tarball:
  stage: release
  image: 'quay.io/gnome_infrastructure/gnome-runtime-images:gnome-master'
  extends:
    - .vars_release
  tags:
    - flatpak
  script:
    # Create flatpak manifest for release
    - sed 's/org.gnome.Fractal.Devel/org.gnome.Fractal/g' build-aux/org.gnome.Fractal.Devel.json > ${MANIFEST_PATH}
    - rewrite-flatpak-manifest ${MANIFEST_PATH} ${FLATPAK_MODULE} ${CONFIG_OPTS}

    # Build tarball with vendored rust dependencies
    - flatpak-builder --keep-build-dirs --user --disable-rofiles-fuse --stop-at=${FLATPAK_MODULE} flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}
    # FIXME: We need --allow-dirty since the manifest is created in place
    - echo "meson dist --allow-dirty" | flatpak-builder --disable-rofiles-fuse --build-shell=${FLATPAK_MODULE} flatpak_app ${MANIFEST_PATH}
    - mv .flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-dist tarball

    # Upload tarball
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file tarball/${RELEASE_TARBALL} "${PACKAGE_REGISTRY_URL}/${RELEASE_TARBALL}"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file tarball/${RELEASE_TARBALL_SHA} "${PACKAGE_REGISTRY_URL}/${RELEASE_TARBALL_SHA}"

    # Extract release notes from appstream
    # FIXME: Appstream requires the files name to be `*.metainfo.xml`
    - cp data/${APP_ID}.metainfo.xml.in.in data/${APP_ID}.metainfo.xml
    - appstream-util appdata-to-news "data/${APP_ID}.metainfo.xml" |
      awk '{ x[NR] = $0 } END { for ( i=5 ; i<=NR ; i++ ) { if (x[i] ~ /^$/ && x[i+1] ~ /^Version/ && x[i+2] ~ /^=/ && x[i+3] ~ /^Release/) exit; else print x[i]; }}' >
      release_notes.txt
  dependencies: []
  rules:
   - if: $CI_COMMIT_TAG
  artifacts:
    paths:
    - tarball
    - release_notes.txt

# https://gitlab.com/gitlab-org/gitlab/-/issues/271534 The default URL needs authentication right now, which is less than optimal...
# Get the package_files ID instead and use that as download URL in the "release" step.
release:
  stage: release
  extends:
    - .vars_release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - apk add curl jq
    - |
      export PACKAGE_ID=$(curl "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages?sort=desc" | jq -c .[0].id)
    - |
      export RELEASE_TARBALL_DOWNLOAD_ID=$(curl "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/${PACKAGE_ID}/package_files" | jq -c .[0].id)
      export RELEASE_TARBALL_SHA_DOWNLOAD_ID=$(curl "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/${PACKAGE_ID}/package_files" | jq -c .[1].id)

    - export RELEASE_TARBALL_URL="${CI_PROJECT_URL}/-/package_files/$RELEASE_TARBALL_DOWNLOAD_ID/download"
    - export RELEASE_TARBALL_SHA_URL="${CI_PROJECT_URL}/-/package_files/$RELEASE_TARBALL_SHA_DOWNLOAD_ID/download"
    - cat release_notes.txt
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"Tarball for ${CI_COMMIT_TAG}\",\"url\":\"${RELEASE_TARBALL_URL}\", \"filepath\": \"/tarball/${RELEASE_TARBALL}\"}" \
        --assets-link "{\"name\":\"Checksum for ${CI_COMMIT_TAG}\",\"url\":\"${RELEASE_TARBALL_SHA_URL}\", \"filepath\": \"/tarball/${RELEASE_TARBALL_SHA}\"}" \
        --description release_notes.txt
  rules:
    - if: $CI_COMMIT_TAG
  needs: ['release-tarball']
